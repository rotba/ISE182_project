using ChatRoom_project.logics;
using ConsoleApp1.BuissnessLayer;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
<<<<<<< HEAD
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;
=======
>>>>>>> fd672be294a06871af4fa73f5ee143a38ced05f9
using System.Text;
using System.Threading.Tasks;

namespace ChatRoom_project.DAL
{
<<<<<<< HEAD
<<<<<<< HEAD
    public class UserHandler : IHandler<User>
    {


=======
    public class UserHandler
    {
>>>>>>> fd672be294a06871af4fa73f5ee143a38ced05f9
        /// 
        /*
         *local
         */
        string connetion_string = null;
        string sql_query = null;
        string server_address = "localhost\\sqlexpress";
        string database_name = "MS3";
        string user_name = "";
        string password = "";

        /*
         *default
        string connetion_string = null;
        string sql_query = null;
        string server_address = "ise172.ise.bgu.ac.il,1433\\DB_LAB";
        string database_name = "db_lab";
        string user_name = "db_lab_user";
        string password = "hackMePlease";
         */
        /// 
<<<<<<< HEAD
        private List<User> users = new List<User>();
        private static readonly string filesPath=
            System.IO.Directory.GetCurrentDirectory() + "\\local_files\\users.bin";

        //Initialize the the handler. Connects to the existing DB or 
        //creates one in a static directory
        public UserHandler()
=======
        public bool insert(User user)
>>>>>>> fd672be294a06871af4fa73f5ee143a38ced05f9
        {
            return false;
        }
        public List<User> retrieve(int number,string nickname, int g_ID)
        {
<<<<<<< HEAD
            SqlConnection connection;
            SqlCommand command;
            string hashedPW = "";
            //defualt
            //connetion_string = $"Data Source={server_address};Initial Catalog={database_name };User ID={user_name};Password={password}";

            //local
            connetion_string = $"Server= {server_address}; Database= {database_name}; Integrated Security=True;";

            connection = new SqlConnection(connetion_string);
            SqlDataReader data_reader;
            try
            {
                connection.Open();
                sql_query = $"SELECT * FROM USERS WHERE Group_Id={g_ID} AND Nickname='{nickname}'";
                command = new SqlCommand(sql_query, connection);
                data_reader = command.ExecuteReader();
                while (data_reader.Read())
                {
                    if (!data_reader.IsDBNull(3))
                        hashedPW = data_reader.GetString(3); //2 is the coloumn index of the date. There are such               
                }
                data_reader.Close();
                command.Dispose();
                connection.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error");
                Console.WriteLine(ex.ToString());
            }

            return hashedPW;
        }
        
        
        public void insertUser(int g_ID,string nickname, string pw)
        {
            SqlConnection connection;
            SqlCommand command;
            //defualt
            //connetion_string = $"Data Source={server_address};Initial Catalog={database_name };User ID={user_name};Password={password}";

            //local
            connetion_string = $"Server= {server_address}; Database= {database_name}; Integrated Security=True;";

            connection = new SqlConnection(connetion_string);
            connection.Open();
            command = new SqlCommand(null, connection);

            // Create and prepare an SQL statement.
            // Use should never use something like: query = "insert into table values(" + value + ");" 
            // Especially when selecting. More about it on the lab about security.
            command.CommandText =
                "INSERT INTO Users ([Group_Id],[Nickname],[Password]) " +
                "VALUES (@toBeInsertedG_ID, @toBeInsertedNickname,@toBeInsertedHashedPW)";
            SqlParameter toBeInsertedG_ID = new SqlParameter(@"toBeInsertedG_ID", SqlDbType.Int, 4);
            SqlParameter toBeInsertedNickname = new SqlParameter(@"toBeInsertedNickname", SqlDbType.Text, 8);
            SqlParameter toBeInsertedHashedPW = new SqlParameter(@"toBeInsertedHashedPW", SqlDbType.Text,64);

            toBeInsertedG_ID.Value = g_ID;
            toBeInsertedNickname.Value = nickname;
            toBeInsertedHashedPW.Value = pw;
            
            command.Parameters.Add(toBeInsertedG_ID);
            command.Parameters.Add(toBeInsertedNickname);
            command.Parameters.Add(toBeInsertedHashedPW);


            // Call Prepare after setting the Commandtext and Parameters.
            command.Prepare();
            int num_rows_changed = command.ExecuteNonQuery();
            command.Dispose();
            connection.Close();
        }

<<<<<<< HEAD

        public string getUserHashedPW(int g_ID,string nickname)
        {
            SqlConnection connection;
            SqlCommand command;
            string hashedPW = "";
            //defualt
            //connetion_string = $"Data Source={server_address};Initial Catalog={database_name };User ID={user_name};Password={password}";

            //local
            connetion_string = $"Server= {server_address}; Database= {database_name}; Integrated Security=True;";

            connection = new SqlConnection(connetion_string);
            SqlDataReader data_reader;
            try
            {
                connection.Open();
                sql_query = $"SELECT * FROM USERS WHERE Group_Id={g_ID} AND Nickname='{nickname}'";
                command = new SqlCommand(sql_query, connection);
                data_reader = command.ExecuteReader();
                while (data_reader.Read())
                {
                    if (!data_reader.IsDBNull(3))
                        hashedPW = data_reader.GetString(3); //2 is the coloumn index of the date. There are such               
                }
                data_reader.Close();
                command.Dispose();
                connection.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error");
                Console.WriteLine(ex.ToString());
            }

            return hashedPW;
        }
        
        
        public void insertUser(int g_ID,string nickname, string pw)
        {
            SqlConnection connection;
            SqlCommand command;
            //defualt
            //connetion_string = $"Data Source={server_address};Initial Catalog={database_name };User ID={user_name};Password={password}";

            //local
            connetion_string = $"Server= {server_address}; Database= {database_name}; Integrated Security=True;";

            connection = new SqlConnection(connetion_string);
            connection.Open();
            command = new SqlCommand(null, connection);

            // Create and prepare an SQL statement.
            // Use should never use something like: query = "insert into table values(" + value + ");" 
            // Especially when selecting. More about it on the lab about security.
            command.CommandText =
                "INSERT INTO Users ([Group_Id],[Nickname],[Password]) " +
                "VALUES (@toBeInsertedG_ID, @toBeInsertedNickname,@toBeInsertedHashedPW)";
            SqlParameter toBeInsertedG_ID = new SqlParameter(@"toBeInsertedG_ID", SqlDbType.Int, 4);
            SqlParameter toBeInsertedNickname = new SqlParameter(@"toBeInsertedNickname", SqlDbType.Text, 8);
            SqlParameter toBeInsertedHashedPW = new SqlParameter(@"toBeInsertedHashedPW", SqlDbType.Text,64);

            toBeInsertedG_ID.Value = g_ID;
            toBeInsertedNickname.Value = nickname;
            toBeInsertedHashedPW.Value = pw;
            
            command.Parameters.Add(toBeInsertedG_ID);
            command.Parameters.Add(toBeInsertedNickname);
            command.Parameters.Add(toBeInsertedHashedPW);


            // Call Prepare after setting the Commandtext and Parameters.
            command.Prepare();
            int num_rows_changed = command.ExecuteNonQuery();
            command.Dispose();
            connection.Close();
        }

=======
>>>>>>> fd672be294a06871af4fa73f5ee143a38ced05f9
        public bool checkIfExists(int g_id, string nickname) {
            bool ans = false;
=======
            List<User> ans = new List<User>();
>>>>>>> origin/rotem
            SqlConnection connection;
            SqlCommand command;
            //defualt
            //connetion_string = $"Data Source={server_address};Initial Catalog={database_name };User ID={user_name};Password={password}";

            //local
            connetion_string = $"Server= {server_address}; Database= {database_name}; Integrated Security=True;";

            connection = new SqlConnection(connetion_string);
            SqlDataReader data_reader;

            try
            {
                connection.Open();
                Console.WriteLine("connected to: " + server_address);
                sql_query = createQuery(number, nickname, g_ID);
                command = new SqlCommand(sql_query, connection);
                data_reader = command.ExecuteReader();
                while (data_reader.Read())
                {
                    int curr_gid =-1;
                    int curr_id=-1;
                    if (!data_reader.IsDBNull(1))
                    {
                        int.TryParse(data_reader.GetValue(0).ToString(), out curr_id);
                        int.TryParse(data_reader.GetValue(1).ToString(), out curr_gid);
                    }
                    ans.Add(new User(
                        curr_id,
                        curr_gid,
                        data_reader.GetValue(2).ToString()
                        ));

                }
                data_reader.Close();
                command.Dispose();
                connection.Close();
            }
            catch (Exception ex)
=======
    public class UserHandler: Handler<User>
    {
        enum Fields { Id, Group_Id, Nickname, Password};
        private static readonly Dictionary<Fields, string> fieldsDic = new Dictionary<Fields, string>()
        {
            {Fields.Id, "Id"},
            {Fields.Group_Id, "Group_Id"},
            {Fields.Nickname, "Nickname"},
            {Fields.Password, "Password"}
        };
        protected override User addRow(SqlDataReader data_reader)
        {
            throw new NotImplementedException();
        }

        protected override string createQuery(int numOfRows, Dictionary<string, string> query)
        {
            string ans =
                "SELECT U.Id, U.Group_Id, U.Nickname" +
                " FROM USERS AS U";
            ans += " WHERE 1=1";

            if (nickname != null)
>>>>>>> 49b8e6b9b2cf6adea14dcc47d4560ef0cf78aaaa
            {
                Console.WriteLine("Error");
                Console.WriteLine(ex.ToString());
            }
            return ans;
        }

        private string createQuery(int number, string nickname, int g_ID)
        {
            string ans =
                "SELECT U.Id, U.Group_Id, U.Nickname" +
                " FROM USERS AS U";
            ans += " WHERE 1=1";
            
            if (nickname != null)
            {
                ans += $" AND U.Nickname = {nickname}";
            }
<<<<<<< HEAD
<<<<<<< HEAD
            Stream myFileStream = File.Create(filesPath);
            BinaryFormatter serializer = new BinaryFormatter();
            serializer.Serialize(myFileStream, users);
            myFileStream.Close();
        }
        //For test purposes
        public string getPath() { return filesPath; }


        /*
         * Saves data in the DB
         * Throws exception if data is null
         */
        public void edit(User data)
        {
            List<User> tmp = retriveAll();
            if (data == null)
                throw new ArgumentNullException("Edit null data request");
            if (!tmp.Contains(data)) return;
            tmp.Remove(data);
            save(data);
        }
        //Retrieves all the users from the DB
        public List<User> retriveAll()
        {
            List<User> ans = new List<User>();
            foreach (User u in users)
            {
                ans.Add(new User(u));
=======
            if (number > 0)
            {
                ans += $" LIMIT {number}";
>>>>>>> 49b8e6b9b2cf6adea14dcc47d4560ef0cf78aaaa
            }
            return ans;
            
        }
        //Stores the user in the DB
        public void save(User data)
        {
            if(data==null)
                throw new ArgumentNullException("Save null data request");
            if (users.Contains(data)) return;
            users.Add(data);
            Stream myFileStream = File.Create(filesPath);
            BinaryFormatter serializes = new BinaryFormatter();
            serializes.Serialize(myFileStream, users);
            myFileStream.Close();
=======
            if (g_ID > 0)
            {
                ans += $" AND U.Group_Id = {g_ID}";
            }
            if (number>0) {
                ans += $" LIMIT {number}";
            }
            return ans;
>>>>>>> fd672be294a06871af4fa73f5ee143a38ced05f9
        }
    }
}
